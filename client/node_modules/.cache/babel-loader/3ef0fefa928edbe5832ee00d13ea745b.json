{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { EditContextProvider, useCheckMinimumRequiredProps, useEditController } from 'ra-core';\nimport { EditView } from './EditView';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes pass the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - successMessage\n * - title\n * - undoable\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\n\nexport var Edit = function (props) {\n  useCheckMinimumRequiredProps('Edit', ['children'], props);\n  var controllerProps = useEditController(props);\n  return React.createElement(EditContextProvider, {\n    value: controllerProps\n  }, React.createElement(EditView, __assign({}, props, controllerProps)));\n};\nEdit.propTypes = {\n  actions: PropTypes.element,\n  aside: PropTypes.element,\n  children: PropTypes.node,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  hasCreate: PropTypes.bool,\n  hasEdit: PropTypes.bool,\n  hasShow: PropTypes.bool,\n  hasList: PropTypes.bool,\n  id: PropTypes.any.isRequired,\n  resource: PropTypes.string.isRequired,\n  title: PropTypes.node,\n  successMessage: PropTypes.string,\n  onSuccess: PropTypes.func,\n  onFailure: PropTypes.func,\n  transform: PropTypes.func,\n  undoable: PropTypes.bool\n};","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/lock-admin/node_modules/ra-ui-materialui/esm/detail/Edit.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","PropTypes","EditContextProvider","useCheckMinimumRequiredProps","useEditController","EditView","Edit","props","controllerProps","createElement","value","propTypes","actions","element","aside","children","node","classes","object","className","string","hasCreate","bool","hasEdit","hasShow","hasList","id","any","isRequired","resource","title","successMessage","onSuccess","func","onFailure","transform","undoable"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { EditContextProvider, useCheckMinimumRequiredProps, useEditController, } from 'ra-core';\nimport { EditView } from './EditView';\n/**\n * Page component for the Edit view\n *\n * The `<Edit>` component renders the page title and actions,\n * fetches the record from the data provider.\n * It is not responsible for rendering the actual form -\n * that's the job of its child component (usually `<SimpleForm>`),\n * to which it passes pass the `record` as prop.\n *\n * The <Edit> component accepts the following props:\n *\n * - actions\n * - aside\n * - component\n * - successMessage\n * - title\n * - undoable\n *\n * @example\n *\n * // in src/posts.js\n * import * as React from \"react\";\n * import { Edit, SimpleForm, TextInput } from 'react-admin';\n *\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <TextInput source=\"title\" />\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * // in src/App.js\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n *\n * import { PostEdit } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={...}>\n *         <Resource name=\"posts\" edit={PostEdit} />\n *     </Admin>\n * );\n * export default App;\n */\nexport var Edit = function (props) {\n    useCheckMinimumRequiredProps('Edit', ['children'], props);\n    var controllerProps = useEditController(props);\n    return (React.createElement(EditContextProvider, { value: controllerProps },\n        React.createElement(EditView, __assign({}, props, controllerProps))));\n};\nEdit.propTypes = {\n    actions: PropTypes.element,\n    aside: PropTypes.element,\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    hasCreate: PropTypes.bool,\n    hasEdit: PropTypes.bool,\n    hasShow: PropTypes.bool,\n    hasList: PropTypes.bool,\n    id: PropTypes.any.isRequired,\n    resource: PropTypes.string.isRequired,\n    title: PropTypes.node,\n    successMessage: PropTypes.string,\n    onSuccess: PropTypes.func,\n    onFailure: PropTypes.func,\n    transform: PropTypes.func,\n    undoable: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}