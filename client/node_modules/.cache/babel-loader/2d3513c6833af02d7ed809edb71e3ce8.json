{"ast":null,"code":"import { createContext } from 'react';\n/**\n * Context to store the result of the useEditController() hook.\n *\n * Use the useEditContext() hook to read the context. That's what the Edit components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContextProvider } from 'ra-core';\n *\n * const Edit = props => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             ...\n *         </EditContextProvider>\n *     );\n * };\n */\n\nexport var EditContext = createContext({\n  basePath: null,\n  record: null,\n  defaultTitle: null,\n  loaded: null,\n  loading: null,\n  redirect: null,\n  setOnFailure: null,\n  setOnSuccess: null,\n  setTransform: null,\n  resource: null,\n  save: null,\n  saving: null,\n  successMessage: null,\n  version: null\n});\nEditContext.displayName = 'EditContext';","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/lock-admin/node_modules/ra-core/esm/controller/details/EditContext.js"],"names":["createContext","EditContext","basePath","record","defaultTitle","loaded","loading","redirect","setOnFailure","setOnSuccess","setTransform","resource","save","saving","successMessage","version","displayName"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAGD,aAAa,CAAC;AACnCE,EAAAA,QAAQ,EAAE,IADyB;AAEnCC,EAAAA,MAAM,EAAE,IAF2B;AAGnCC,EAAAA,YAAY,EAAE,IAHqB;AAInCC,EAAAA,MAAM,EAAE,IAJ2B;AAKnCC,EAAAA,OAAO,EAAE,IAL0B;AAMnCC,EAAAA,QAAQ,EAAE,IANyB;AAOnCC,EAAAA,YAAY,EAAE,IAPqB;AAQnCC,EAAAA,YAAY,EAAE,IARqB;AASnCC,EAAAA,YAAY,EAAE,IATqB;AAUnCC,EAAAA,QAAQ,EAAE,IAVyB;AAWnCC,EAAAA,IAAI,EAAE,IAX6B;AAYnCC,EAAAA,MAAM,EAAE,IAZ2B;AAanCC,EAAAA,cAAc,EAAE,IAbmB;AAcnCC,EAAAA,OAAO,EAAE;AAd0B,CAAD,CAA/B;AAgBPd,WAAW,CAACe,WAAZ,GAA0B,aAA1B","sourcesContent":["import { createContext } from 'react';\n/**\n * Context to store the result of the useEditController() hook.\n *\n * Use the useEditContext() hook to read the context. That's what the Edit components do in react-admin.\n *\n * @example\n *\n * import { useEditController, EditContextProvider } from 'ra-core';\n *\n * const Edit = props => {\n *     const controllerProps = useEditController(props);\n *     return (\n *         <EditContextProvider value={controllerProps}>\n *             ...\n *         </EditContextProvider>\n *     );\n * };\n */\nexport var EditContext = createContext({\n    basePath: null,\n    record: null,\n    defaultTitle: null,\n    loaded: null,\n    loading: null,\n    redirect: null,\n    setOnFailure: null,\n    setOnSuccess: null,\n    setTransform: null,\n    resource: null,\n    save: null,\n    saving: null,\n    successMessage: null,\n    version: null,\n});\nEditContext.displayName = 'EditContext';\n"]},"metadata":{},"sourceType":"module"}