{"ast":null,"code":"import { useContext } from 'react';\nimport { ResourceContext } from './ResourceContext';\n/**\n * Hook to read the resource from the ResourceContext.\n *\n * Must be used within a <ResourceContextProvider> (e.g. as a descendent of <Resource>\n * or any reference related components).\n *\n * @returns {ResourceContextValue} The resource\n */\n\nexport var useResourceContext = function (props) {\n  var context = useContext(ResourceContext);\n\n  if (!context) {\n    /**\n     * The element isn't inside a <ResourceContextProvider>\n     *\n     * @deprecated - to be removed in 4.0\n     */\n    if (process.env.NODE_ENV !== 'production') {// Restore this message when ResourceContext is actually used\n      // console.warn(\n      //     \"Any react-admin components must be used inside a <ResourceContextProvider>. Relying on props rather than context to get the resource data is deprecated and won't be supported in the next major version of react-admin.\"\n      // );\n    } // Ignored because resource is often optional (as it is injected) in components which passes the props to this hook\n\n\n    return props.resource;\n  }\n\n  return context;\n};","map":{"version":3,"sources":["C:/Users/Schwartza/Desktop/prog2020/lock-admin/node_modules/ra-core/esm/core/useResourceContext.js"],"names":["useContext","ResourceContext","useResourceContext","props","context","process","env","NODE_ENV","resource"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,kBAAkB,GAAG,UAAUC,KAAV,EAAiB;AAC7C,MAAIC,OAAO,GAAGJ,UAAU,CAACC,eAAD,CAAxB;;AACA,MAAI,CAACG,OAAL,EAAc;AACV;AACR;AACA;AACA;AACA;AACQ,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C,CACvC;AACA;AACA;AACA;AACH,KAXS,CAYV;;;AACA,WAAOJ,KAAK,CAACK,QAAb;AACH;;AACD,SAAOJ,OAAP;AACH,CAlBM","sourcesContent":["import { useContext } from 'react';\nimport { ResourceContext } from './ResourceContext';\n/**\n * Hook to read the resource from the ResourceContext.\n *\n * Must be used within a <ResourceContextProvider> (e.g. as a descendent of <Resource>\n * or any reference related components).\n *\n * @returns {ResourceContextValue} The resource\n */\nexport var useResourceContext = function (props) {\n    var context = useContext(ResourceContext);\n    if (!context) {\n        /**\n         * The element isn't inside a <ResourceContextProvider>\n         *\n         * @deprecated - to be removed in 4.0\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            // Restore this message when ResourceContext is actually used\n            // console.warn(\n            //     \"Any react-admin components must be used inside a <ResourceContextProvider>. Relying on props rather than context to get the resource data is deprecated and won't be supported in the next major version of react-admin.\"\n            // );\n        }\n        // Ignored because resource is often optional (as it is injected) in components which passes the props to this hook\n        return props.resource;\n    }\n    return context;\n};\n"]},"metadata":{},"sourceType":"module"}