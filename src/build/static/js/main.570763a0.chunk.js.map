{"version":3,"sources":["components/key/KeyActions.jsx","components/key/key.js","components/key/KeyCreate.jsx","components/key/KeyEdit.jsx","components/reader/ReaderList.jsx","components/reader/ReaderShowActions.jsx","components/reader/ReaderShow.jsx","components/event/EventList.jsx","components/access/AccessList.jsx","components/newKey/NewKeyList.jsx","AuthProvider.js","App.js","reportWebVitals.js","index.js"],"names":["KeyActions","props","className","filters","exporter","maxResults","rest","useListContext","currentSort","resource","displayedFilters","filterValues","basePath","showFilter","total","TopToolbar","sanitizeListRestProps","cloneElement","context","CreateButton","ExportButton","disabled","sort","KeyList","List","actions","Datagrid","TextField","source","DateField","showTime","locales","BooleanField","EditButton","KeyCreate","Create","title","SimpleForm","TextInput","DateTimeInput","BooleanInput","ReferenceInput","reference","allowEmpty","SelectInput","optionText","KeyEdit","Edit","DateInput","label","cardStyle","width","minHeight","margin","display","verticalAlign","ShowTimePassed","date","parsedDate","Date","oldDate","currenDate","difference","Math","abs","getTime","round","ReaderGrid","ids","data","notify","useNotify","openDoor","id","a","fetch","response","json","console","log","style","map","Card","CardHeader","record","subheader","CardContent","lastPing","CardActions","textAlign","Button","onClick","variant","ShowButton","ReaderList","serverAdress","process","ReaderShowActions","refresh","useRefresh","port","deleteAllKeys","message","setTimeout","syncAllKeys","marginLeft","color","KeyEditToolbar","Toolbar","SaveButton","ShowPropsExtractor","children","keys","SimpleShowLayout","toolbar","ArrayField","NumberField","ReferenceManyField","target","rowStyle","index","backgroundColor","find","key","uid","name","acctype","acctype2","acctype3","acctype4","ReaderShow","Show","EventList","AccessList","NewKeyList","authProvider","login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","then","status","Error","statusText","user","localStorage","setItem","avatar","fullName","catch","error","checkError","removeItem","Promise","reject","resolve","checkAuth","getItem","logout","getIdentity","parse","getPermissions","role","App","Admin","dataProvider","restProvider","locale","Resource","list","show","create","edit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.570763a0.chunk.js","sourcesContent":["import * as React from 'react';\nimport { cloneElement } from 'react';\nimport {\n    useListContext,\n    TopToolbar,\n    CreateButton,\n    ExportButton,\n    sanitizeListRestProps,\n} from 'react-admin';\n\nconst KeyActions = (props) => {\n    const {\n        className,\n        exporter,\n        filters,\n        maxResults,\n        ...rest\n    } = props;\n    const {\n        currentSort,\n        resource,\n        displayedFilters,\n        filterValues,\n        basePath,\n        showFilter,\n        total,\n    } = useListContext();\n\n\n    return (\n        <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n            {filters && cloneElement(filters, {\n                resource,\n                showFilter,\n                displayedFilters,\n                filterValues,\n                context: 'button',\n            })}\n            <CreateButton basePath={basePath} />\n            <ExportButton\n                disabled={total === 0}\n                resource={resource}\n                sort={currentSort}\n                filterValues={filterValues}\n                maxResults={maxResults}\n            />\n            \n        </TopToolbar>\n    );\n};\n\nexport default KeyActions","// in posts.js\nimport * as React from \"react\";\nimport { List, Datagrid, TextField, DateField, BooleanField, EditButton } from 'react-admin';\nimport KeyActions from \"./KeyActions\";\n\nexport const KeyList = (props) => (\n    <List \n        actions={<KeyActions/>} \n        {...props} \n    >\n        <Datagrid>\n            <TextField source=\"name\"/>\n            <TextField source=\"uid\" />\n            <DateField source=\"validUntil\" showTime locales=\"de\"/>\n            <BooleanField source=\"isOneTimeCode\" />\n            <EditButton/>\n        </Datagrid>\n    </List>\n);\n\nexport const PostTitle = ({ record }) => {\n    return <span>Post {record ? `\"${record.title}\"` : ''}</span>;\n};\n\n\n\nexport default KeyList","// in posts.js\nimport * as React from \"react\";\nimport { Create, SimpleForm, TextInput, BooleanInput, DateTimeInput, ReferenceInput, SelectInput } from 'react-admin';\n\n\n\n\n\nconst KeyCreate = (props) => (\n    <Create title=\"Create a Post\"  {...props} >\n        <SimpleForm>\n            <TextInput source=\"name\" />\n            <TextInput source=\"uid\" />\n            <DateTimeInput source=\"validUntil\" showTime locales=\"de\" />\n            <BooleanInput source=\"isOneTimeCode\" />\n            {<ReferenceInput reference=\"newkey\" source=\"newkey_id\"  allowEmpty {...props}>\n                <SelectInput optionText=\"uid\" />\n            </ReferenceInput>}\n        </SimpleForm>\n    </Create>\n);\n\nexport default KeyCreate","import React from 'react'\nimport {Edit, SimpleForm, TextInput, DateInput, BooleanInput} from 'react-admin'\n\nconst KeyEdit = (props) => (\n    <Edit {...props}>\n        <SimpleForm>\n            <TextInput disabled source=\"id\" />\n            <TextInput source=\"uid\" disabled />\n            <TextInput source=\"name\" />\n            <DateInput label=\"valid until\" source=\"validUntil\" showTime locales=\"de\" />\n            <BooleanInput source=\"isOneTimeCode\" />\n        </SimpleForm>\n    </Edit>\n);\n\nexport default KeyEdit\n","// in src/comments.js\nimport * as React from 'react';\nimport { useListContext, List, TextField, DateField, ShowButton, Button, useNotify } from 'react-admin';\nimport { Card, CardActions, CardContent, CardHeader } from '@material-ui/core';\nimport IconEvent from '@material-ui/icons/Event';\n\n\nconst cardStyle = {\n    width: 300,\n    minHeight: 250,\n    margin: '0.5em',\n    display: 'inline-block',\n    verticalAlign: 'top'\n};\n\n\nfunction ShowTimePassed({date}){\n    const parsedDate=new Date(date)\n    const oldDate=parsedDate instanceof Date? parsedDate : new Date();\n    const currenDate=new Date();\n    const difference=new Date(Math.abs(currenDate - oldDate)).getTime() / 1000;\n\n    return <div>{Math.round(difference)} seconds ago</div>\n}\n\nconst ReaderGrid = () => {\n    const { ids, data/* , basePath */ } = useListContext();\n    const notify=useNotify();\n    \n    const openDoor=async(id)=>{\n        try {\n            const response=await fetch(`/${id}`)\n            const json=await response.json();\n            notify(\"door opened\", \"info\")\n            console.log(json);\n        } catch (error) {\n            console.log(error)\n            notify(\"could not open door\", \"error\")\n\n        }\n    }\n\n    return (\n        <div style={{ margin: '1em' }}>\n        {ids.map(id =>\n            <Card key={id} style={cardStyle}>\n                <CardHeader\n                    title={<TextField record={data[id]} source=\"readerName\" />}\n                    subheader={<TextField record={data[id]} source=\"ip\"/>}\n                    /* avatar={<Avatar icon={<PersonIcon />} />} */\n                />\n                <CardContent>\n                    <DateField record={data[id]} source=\"lastPing\" showTime locales=\"de\"/>\n                    <ShowTimePassed date={data[id].lastPing}/>\n                </CardContent>\n                <CardActions style={{ textAlign: 'right' }}>\n                    <Button\n                        onClick={() => openDoor(id)}\n                        label=\"open\"\n                        variant=\"contained\"\n                    >\n                        <IconEvent />\n                    </Button>\n                    <ShowButton label=\"SHOW\" record={data[id]} variant=\"contained\" basePath=\"reader\"/>\n                </CardActions>\n            </Card>\n        )}\n        </div>\n    );\n};\n\nexport const ReaderList = (props) => (\n    <List title=\"All Readers\" {...props}>\n        <ReaderGrid />\n    </List>\n);\n\nexport default ReaderList","import * as React from 'react';\nimport {\n    TopToolbar,\n    Button,\n    useNotify,\n    useRefresh\n} from 'react-admin';\nconst serverAdress=process.env.REACT_APP_SERVER || \"http://locaholst:5000\";\n\n\nconst ReaderShowActions = ({ basePath, data, resource }) => {\n    const notify=useNotify();\n    const refresh=useRefresh();\n    \n    const openDoor=async(port)=>{\n        try {\n            const response=await fetch(`${serverAdress}/opendoor/${data.id}?port=${port}`)\n            const json=await response.json();\n            notify(`door ${data.id} opened port ${port}`, \"info\")\n            console.log(json);\n        } catch (error) {\n            console.log(error)\n            notify(\"could not open door\", \"error\")\n\n        }\n    }\n\n    const deleteAllKeys=async()=>{\n        try {\n            const response=await fetch(`${serverAdress}/deleteall/${data.id}`)\n            const json=await response.json();\n            notify(json.message? json.message :`reader ${data.id} deleted all keys. Reader keys will be refreshed shortly`, \"info\")\n            setTimeout(refresh, 1000);\n        } catch (error) {\n            console.log(error)\n            notify(`could not delete keys on reader ${data.id}`, \"error\")\n\n        }\n    }\n\n    const syncAllKeys=async()=>{\n        try {\n            const response=await fetch(`${serverAdress}/syncall/${data.id}`)\n            const json=await response.json();\n            notify(json.message? json.message :`reader ${data.id} synced all keys`, \"info\")\n            console.log(json);\n        } catch (error) {\n            console.log(error)\n            notify(`failed to sync to reader ${data.id}`, \"error\")\n\n        }\n    }\n\n    /* const getReaderKeys=async()=>{\n        try {\n            const response=await fetch(`http://localhost:5000/readerkey/${data.id}`)\n            const json=await response.json();\n            notify(`door ${data.id} synced all keys`, \"info\")\n            console.log(json);\n        } catch (error) {\n            console.log(error)\n            notify(`failed to sync to door ${data.id}`, \"error\")\n\n        }\n    } */\n\n    const marginLeft={marginLeft: \"8px\"}\n\n    return(\n        <TopToolbar >\n            <Button label=\"OPEN 1\" color=\"primary\" variant=\"contained\" onClick={()=>openDoor(1)}/>\n            <Button style={marginLeft} label=\"OPEN 2\" color=\"primary\" variant=\"contained\" onClick={()=>openDoor(2)}/>\n            <Button style={marginLeft} label=\"OPEN 3\" color=\"primary\" variant=\"contained\" onClick={()=>openDoor(3)}/>\n            <Button style={marginLeft} label=\"OPEN 4\" color=\"primary\" variant=\"contained\" onClick={()=>openDoor(4)}/>\n            {/* <Button style={marginLeft} label=\"SHOW READER KEYS\" color=\"secondary\" variant=\"contained\" onClick={getReaderKeys}/> */}\n            <Button style={marginLeft} label=\"SYNC ALL!\" color=\"secondary\" variant=\"contained\" onClick={syncAllKeys}/>\n            <Button style={marginLeft} label=\"DELETE ALL!\" color=\"secondary\" variant=\"contained\" onClick={deleteAllKeys}/>\n        </TopToolbar>\n    )\n};\n\nexport default ReaderShowActions","import React from 'react'\nimport { Toolbar, SaveButton, Create, SimpleForm, ReferenceInput, SelectInput, Datagrid, Show, SimpleShowLayout, TextField, DateField, ArrayField, BooleanField, ReferenceManyField, NumberField} from 'react-admin';\nimport ReaderShowActions from './ReaderShowActions'\n\n\nconst KeyEditToolbar = props => (\n    <Toolbar {...props} >\n        <SaveButton />\n    </Toolbar>\n);\n\nconst ShowPropsExtractor=({children, ...props})=>{\n    const {keys=[]}=props.record;\n\n    const readerKeyRowStyle = (record, index) => {\n        console.log(record, index, props)\n        return {\n            backgroundColor: keys.find(key=>{\n                return ( \n                    key.uid === record.uid && \n                    key.name === record.name &&\n                    key.acctype === record.acctype &&\n                    key.acctype2 === record.acctype2 &&\n                    key.acctype3 === record.acctype3 &&\n                    key.acctype4 === record.acctype4 ) // add back valid until later \n            }) ? '#efe' : 'white',\n        }\n    }\n    return (\n        <SimpleShowLayout {...props}>\n            <TextField source=\"readerName\" />\n            <TextField source=\"ip\" />\n            <DateField source=\"lastPing\" showTime locales=\"de\"/>\n            <Create resource={props.resource}>\n                <SimpleForm toolbar={<KeyEditToolbar/>} margin=\"none\">\n                    <ReferenceInput reference=\"key\" source=\"key_id\"  allowEmpty>\n                        <SelectInput optionText=\"name\" />\n                    </ReferenceInput>\n                </SimpleForm>\n            </Create>\n\n            <ArrayField label=\"KEYS IN THE DB\" source=\"keys\" >\n                <Datagrid>\n                    <TextField source=\"name\" />\n                    <TextField source=\"uid\" />\n                    <DateField source=\"validUntil\" showTime locales=\"de\"/>\n                    <BooleanField source=\"isOneTimeCode\" />\n                    <NumberField source=\"acctype\" />\n                    <NumberField source=\"acctype2\" />\n                    <NumberField source=\"acctype3\" />\n                    <NumberField source=\"acctype4\" />\n                </Datagrid>\n            </ArrayField>\n\n            <ReferenceManyField reference=\"readerkey\" target=\"readerId\" label=\"KEYS ON READER\" allowEmpty {...props}>\n                <Datagrid  rowStyle={readerKeyRowStyle} {...props}>\n                    {console.log(props)}\n                    <TextField source=\"name\" />\n                    <TextField source=\"uid\" />\n                    <DateField source=\"validUntil\" showTime locales=\"de\"/>\n                    <NumberField source=\"acctype\" />\n                    <NumberField source=\"acctype2\" />\n                    <NumberField source=\"acctype3\" />\n                    <NumberField source=\"acctype4\" />\n                </Datagrid>\n            </ReferenceManyField>\n            \n\n        </SimpleShowLayout>\n    )\n}\n/* const ReaderShowA = (props) => {\n    console.log(props)\n\n    const readerKeyRowStyle = (record, index, props) => {\n        console.log(record, index, props)\n        return {\n            backgroundColor: record.uid > 3031947 ? '#efe' : 'white',\n        }\n    }\n        \n    \n\n    return (\n        <Show title=\" \" actions={<ReaderShowActions/>}  {...props}>\n            <SimpleShowLayout {...props}>\n                <TextField source=\"readerName\" />\n                <TextField source=\"ip\" />\n                <DateField source=\"lastPing\" showTime locales=\"de\"/>\n                <Create resource={props.resource}>\n                    <SimpleForm toolbar={<KeyEditToolbar/>} margin=\"none\">\n                        <ReferenceInput reference=\"key\" source=\"key_id\"  allowEmpty>\n                            <SelectInput optionText=\"name\" />\n                        </ReferenceInput>\n                    </SimpleForm>\n                </Create>\n\n                <ArrayField label=\"KEYS IN THE DB\" source=\"keys\" >\n                    <Datagrid>\n                        <TextField source=\"name\" />\n                        <TextField source=\"uid\" />\n                        <DateField source=\"validUntil\" showTime locales=\"de\"/>\n                        <BooleanField source=\"isOneTimeCode\" />\n                        <NumberField source=\"acctype\" />\n                        <NumberField source=\"acctype2\" />\n                        <NumberField source=\"acctype3\" />\n                        <NumberField source=\"acctype4\" />\n                    </Datagrid>\n                </ArrayField>\n\n                <ReferenceManyField reference=\"readerkey\" target=\"readerId\" label=\"KEYS ON READER\" allowEmpty {...props}>\n                    <Datagrid  rowStyle={(record, index, props)=>readerKeyRowStyle(record, index, props)} {...props}>\n                        {console.log(props)}\n                        <TextField source=\"name\" />\n                        <TextField source=\"uid\" />\n                        <DateField source=\"validUntil\" showTime locales=\"de\"/>\n                        <NumberField source=\"acctype\" />\n                        <NumberField source=\"acctype2\" />\n                        <NumberField source=\"acctype3\" />\n                        <NumberField source=\"acctype4\" />\n                    </Datagrid>\n                </ReferenceManyField>\n                \n\n            </SimpleShowLayout>\n        </Show>\n    )\n} */\n\nconst ReaderShow = (props) => {\n    return (\n        <Show title=\" \" actions={<ReaderShowActions/>}  {...props}>\n            <ShowPropsExtractor/>\n        </Show>\n    )\n}\n\nexport default ReaderShow\n","import * as React from \"react\";\nimport { List, Datagrid, TextField, DateField } from 'react-admin';\n\n\n/* @Column(\"varchar\", { length: 20, nullable: false })\n    type: string;\n\n    @Column(\"varchar\", { nullable: false, length: 20 })\n    src: string;\n\n    @Column(\"varchar\", { nullable: true, length: 40 })\n    description: string;\n\n    @Column(\"varchar\", { nullable: false, length: 20 })\n    data: string;\n\n    @Column(\"timestamp\")\n    time: Date;\n\n    @Column(\"varchar\", { nullable: false, length: 20 })\n    door: string; */\n\n\nexport const EventList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"door\" />\n            <TextField source=\"type\" />\n            <TextField source=\"src\" />\n            <TextField source=\"description\" />\n            <TextField source=\"data\" />\n            <DateField source=\"time\" showTime locales=\"de\"/>\n        </Datagrid>\n    </List>\n);\n\nexport default EventList","import * as React from \"react\";\nimport { List, Datagrid, TextField, DateField, BooleanField } from 'react-admin';\n\n\n/* @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column(\"varchar\")\n    uid: string;\n\n    @Column(\"varchar\")\n    name: string;\n\n    @Column(\"bool\")\n    isKnown: boolean;\n\n    @Column(\"varchar\")\n    door: string;\n\n    @Column(\"varchar\", { length: 20, nullable: false })\n    type: string;\n\n    @Column(\"timestamp\")\n    time: Date; */\n\n\nexport const AccessList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"uid\" />\n            <TextField source=\"name\" />\n            <TextField source=\"door\" />\n            <TextField source=\"type\" />\n            <TextField source=\"access\" />\n            <DateField source=\"time\" showTime locales=\"de\"/>\n            <BooleanField source=\"isKnown\" />\n        </Datagrid>\n    </List>\n);\n\nexport default AccessList","import React from \"react\";\nimport { List, Datagrid, TextField, DateField} from 'react-admin';\n\n/* \n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column(\"varchar\", { length: 20, nullable: false })\n    uid: string;\n\n    @Column(\"varchar\")\n    name: string;\n\n    @Column(\"timestamp\")\n    time: Date\n\n    @Column(\"varchar\", { nullable: false, length: 20 })\n    door: string;\n*/\n\n\nexport const NewKeyList = (props) => (\n    <List {...props}>\n        <Datagrid>\n            <TextField source=\"uid\" />\n            <TextField source=\"door\" />\n            <TextField source=\"name\" />\n            <DateField source=\"time\" showTime locales=\"de\"/>\n        </Datagrid>\n    </List>\n);\n\n\n","const serverAdress=process.env.REACT_APP_SERVER || \"http://locaholst:5000\";\n\n\nconst authProvider = {\n    // authentication\n    login: ({ username, password })=>{\n        const request = new Request(`${serverAdress}/login`, {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n        return fetch(request)\n            .then(response => {\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(json => {\n                const {user}=json;\n                if(!user) throw Error('no user data found in response')\n                localStorage.setItem('auth', JSON.stringify({\n                    id: user.id,\n                    avatar: null,\n                    fullName: user.username\n                }));\n            })\n            .catch((error) => {\n                throw new Error(error)\n            });\n    },\n    checkError: (error) => {\n        const status = error.status;\n        if (status === 401 || status === 403) {\n            localStorage.removeItem('auth');\n            return Promise.reject({ message: false });\n        }\n        // other error code (404, 500, etc): no need to log out\n        return Promise.resolve();\n    },\n    checkAuth: ()=>{\n        const auth=localStorage.getItem('auth')\n        return auth\n        ? Promise.resolve()\n        : Promise.reject()\n    },\n    logout: () => {\n        localStorage.removeItem('auth');\n        return Promise.resolve();\n    },\n    getIdentity: () => {\n        try {\n            const { id, fullName, avatar } = JSON.parse(localStorage.getItem('auth'));\n            return Promise.resolve({ id, fullName, avatar });\n        } catch (error) {\n            return Promise.reject(error);\n        }\n    },\n    // authorization\n    getPermissions: ()=> {\n        const role = localStorage.getItem('permissions');\n        return role ? Promise.resolve(role) : Promise.reject();\n    },\n  };\n\n\nexport default authProvider","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport restProvider from 'ra-data-simple-rest';\nimport {KeyList} from './components/key/key';\nimport KeyCreate from './components/key/KeyCreate'\nimport KeyEdit from './components/key/KeyEdit'\nimport ReaderList from './components/reader/ReaderList';\nimport ReaderShow from './components/reader/ReaderShow';\nimport './App.css';\nimport EventList from './components/event/EventList';\nimport AccessList from './components/access/AccessList'\nimport { NewKeyList } from './components/newKey/NewKeyList';\nimport authProvider from './AuthProvider';\n\n\n\n\nfunction App() {\n  const serverAdress=process.env.REACT_APP_SERVER;\n  if(!serverAdress){\n    return <p>\n      env variable REACT_APP_SERVER point to the adress of the backend needs to be set\n    </p>\n  }\n  return (\n    <Admin dataProvider={restProvider(serverAdress)} locale=\"en\" authProvider={authProvider}>\n        <Resource name=\"reader\" list={ReaderList} show={ReaderShow}/>\n        <Resource name=\"key\" list={KeyList} create={KeyCreate} edit={KeyEdit}/>\n        <Resource name=\"newkey\" list={NewKeyList} />\n        <Resource name=\"event\" list={EventList}   />\n        <Resource name=\"access\" list={AccessList}   />\n        <Resource name=\"readerkey\"   />\n    </Admin>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n/* ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n */\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}